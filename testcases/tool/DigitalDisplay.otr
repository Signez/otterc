object DigitalDisplay {
	def main() : Unit = {
		println(new Starter().init());
	}
}

class Starter {
	def init():String = {
		var useless : Int;
		var display : Display;
		display = new Display();
		useless = display.init();
		useless = display.updateContent(0, 1, 2, 3);
		useless = display.draw();
		useless = display.updateContent(4, 5, 6, 7);
		useless = display.draw();
		useless = display.updateContent(8, 9, 1, 0);
		useless = display.draw();
		return "";
	}
}

/* This class can displays 4 digits 
with chars as pixels. */
class Display {

	var useless : Int;
	var DISPLAY_SIZE : Int;	
	var lines : LinesBank;
	var structures : StructuresBank;
	var digits : Int[];
	
	def init() : Int = {

		var index:Int;

		DISPLAY_SIZE = 4;
		digits = new Int[DISPLAY_SIZE];
		lines = new LinesBank();
		useless = lines.init();
		structures = new StructuresBank();
		useless = structures.init();
		
		index = 0;
		while (index < DISPLAY_SIZE) {
			digits[index] = 0;
			index = index + 1;
		}
		return 0;
	}
	
	def updateContent(d0:Int, d1:Int, d2:Int, d3:Int): Int = {
		digits[0] = d0;
		digits[1] = d1;
		digits[2] = d2;
		digits[3] = d3;
		return 0;
	}
	
	def skip():Int = {
		println(" ");
		return 0;
	}
	
	def draw():Int = {
		var index : Int;
		useless = this.skip();
		index = 0;
		while (index < 7) {
			 useless = this.drawLine(index);
			 index = index + 1;
		}
		return 0;
	}
	
	def drawLine(lineIndex: Int): Int = {
		var digitIndex : Int;
		var content : String;
		content = "";
		digitIndex = 0;
		while (digitIndex < 4) {
			content = content + " ";
			content = content + lines.get(lineIndex).get(structures.get(digits[digitIndex]));
			digitIndex = digitIndex + 1;
		}
		println(content);
		return 0;
	}
}

/*
   This class contains the structure of each digit (which sides are on/off)
*/
class StructuresBank {
	var useless: Int;
	var c0:DigitStructure;
	var c1:DigitStructure;
	var c2:DigitStructure;
	var c3:DigitStructure;
	var c4:DigitStructure;
	var c5:DigitStructure;
	var c6:DigitStructure;
	var c7:DigitStructure;
	var c8:DigitStructure;
	var c9:DigitStructure;

	def init():Int = {
		c0 = new DigitStructure();
		c1 = new DigitStructure();
		c2 = new DigitStructure();
		c3 = new DigitStructure();
		c4 = new DigitStructure();
		c5 = new DigitStructure();
		c6 = new DigitStructure();
		c7 = new DigitStructure();
		c8 = new DigitStructure();
		c9 = new DigitStructure();
		useless = c0.init(1, 0, 1, 1, 1, 1, 1);
		useless = c1.init(0, 0, 0, 0, 1, 0, 1);	
		useless = c2.init(1, 1, 1, 0, 1, 1, 0);
		useless = c3.init(1, 1, 1, 0, 1, 0, 1);
		useless = c4.init(0, 1, 0, 1, 1, 0, 1);
		useless = c5.init(1, 1, 1, 1, 0, 0, 1);		
		useless = c6.init(1, 1, 1, 1, 0, 1, 1);
		useless = c7.init(1, 0, 0, 0, 1, 0, 1);
		useless = c8.init(1, 1, 1, 1, 1, 1, 1);
		useless = c9.init(1, 1, 1, 1, 1, 0, 1);
		return 0;
	}
	
	def get(index:Int) : DigitStructure = {
		var structure : DigitStructure;
		structure = c0;
		if (index == 1){ structure = c1;
		} else { if (index == 2){ structure = c2;
		} else { if (index == 3){ structure = c3;
		} else { if (index == 4){ structure = c4;
		} else { if (index == 5){ structure = c5;
		} else { if (index == 6){ structure = c6;
		} else { if (index == 7){ structure = c7;
		} else { if (index == 8){ structure = c8;
		} else { if (index == 9){ structure = c9;
		}}}}}}}}}
		
		return structure;
	}
}

/*
 * This class is a container for all the possible lines
 * on the display of a single digit.
 */
class LinesBank {
	var useless : Int;
	var l0 : DigitLine;
	var l1 : DigitLine;
	var l2 : DigitLine;
	var l3 : DigitLine;
	var l4 : DigitLine;
	var l5 : DigitLine;
	var l6 : DigitLine;
	
	def init():Int = {
		l0 = new DigitLine();
		l1 = new DigitLine();
		l2 = new DigitLine();
		l3 = new DigitLine();
		l4 = new DigitLine();
		l5 = new DigitLine();
		l6 = new DigitLine();
		useless = l0.init(0, 1, 1, 0);
		useless = l1.init(4, 0, 0, 5);
		useless = l2.init(4, 0, 0, 5);
		useless = l3.init(0, 2, 2, 0);
		useless = l4.init(6, 0, 0, 7);
		useless = l5.init(6, 0, 0, 7);
		useless = l6.init(0, 3, 3, 0);
		return 0;
	}
	
	def get(index:Int):DigitLine = {
		var line : DigitLine;
		line = l0;
		if (index == 1) line = l1;
		if (index == 2) line = l2;
		if (index == 3) line = l3;
		if (index == 4) line = l4;
		if (index == 5) line = l5;
		if (index == 6) line = l6;

		return line;
	}
}

/**
 * Object of this class are parts of the structure of the digit display
 * ("strokes").
 */
class DigitStructure {
	var partStatus:Int[];
	
	def init(c1:Int, c2:Int, c3:Int, c4:Int, c5:Int, c6:Int, c7:Int):Int = {
		partStatus = new Int[8];
		partStatus[0] = 0;
		partStatus[1] = c1;
		partStatus[2] = c2;
		partStatus[3] = c3;
		partStatus[4] = c4;
		partStatus[5] = c5;
		partStatus[6] = c6;
		partStatus[7] = c7;
		return 0;
	}
	
	def getPartStatus(index:Int):Int = {
		return partStatus[index];
	}
}

// This class represent a row of 4 chars in the display of
// a single digit.
class DigitLine {
	var useless : Int;
	var onPixel : String;
	var offPixel : String;

	var partOfPixel : Int[];
	
	def init(pix0:Int, pix1:Int, pix2:Int, pix3:Int):Int = {
		onPixel = "@";
		offPixel = " ";
		partOfPixel = new Int[4];
		useless = this.update(pix0, pix1, pix2, pix3);
		return 0;
	}
	
	def update(pix0:Int, pix1:Int, pix2:Int, pix3:Int):Int = {
		partOfPixel[0] = pix0;
		partOfPixel[1] = pix1;
		partOfPixel[2] = pix2;
		partOfPixel[3] = pix3;
		return 0;
	}
	
	def get(structure : DigitStructure) : String = {
		var str : String;
		var index : Int;
		str = " ";
		index = 0;
		while (index < 4) {
			str = str + this.pixelChar(structure.getPartStatus(partOfPixel[index]));
			index = index + 1;
		}
		return str;
	}
	
	def pixelChar(on : Int):String = {
		var pixel: String;
		if (on == 1)
			pixel = onPixel;
		else
			pixel = offPixel;
			
		return pixel;
	}
}