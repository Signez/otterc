//PGCD_Calculator by Jonny Quarta

object PGCD_Calculator {
    def main(): Unit = {
        println(new PGCD().Start());
    }
}
 
/* This class contains vector calculations */
class PGCD {
    var n1: Int;
    var n2: Int;
 	
 	// Defines the numbers values
	def InitializeNumbers() : Int = {
		n1 = 147;
		n2 = 426;
		
		return 0;
	}
	
	
    // Invoke methods to initialize and calculate
    def Start() : String = { 
        var q: Int;
		
		q = this.InitializeNumbers();
		println("Number 1 : " + n1);
		println("Number 2 : " + n2);
		
		println("PGCD of number 1 and number 2 : " + this.CalculatePGCD(n1, n2));
		
        return "";
    }
 
	// Computes the pgcd of two numbers
	def CalculatePGCD(no1: Int, no2: Int): Int = {
		var out: Int;
		out = 0-1;
		
		if(no1 == no2) { out = no1; }
		if(no1 == 0) { out = no2; }
		if(no2 == 0) { out = no1; }
		if(this.IsEven(no1) == true && this.IsEven(no2) == true) { out = 2 * this.CalculatePGCD(no1 / 2, no2 / 2); }
		if(this.IsEven(no1) == true && this.IsEven(no2) == false) { out = this.CalculatePGCD(no1 / 2, no2); }
		if(this.IsEven(no1) == false && this.IsEven(no2) == true) { out = this.CalculatePGCD(no1, no2 / 2); }
		if(this.IsEven(no1) == false && this.IsEven(no2) == false) { 
			if(no1 < no2) { out = this.CalculatePGCD(no1, no2 - no1); }
			if(no2 < no1) { out = this.CalculatePGCD(no1 - no2, no2); }
		}
		
		return out;
	}
	
	// Determines if a number is even or odd without using the modulo (which is not allowed in this language)
	def IsEven(n: Int): Bool = {
		var out: Bool;
		
		if((n / 2) == ((n + 1) / 2)) { out = true; }
		else { out = false; }
		
		return out;
	}
}