// A simulator of the card game : Bataille (War).

object App {
	
	def main() : Unit = {
		println("Finished. " + new Game().init(13, 4, 1751, 200).start());
	}
	
}


// Class representing a deck of cards.
class Deck {
	
	var NB_VALUES : Int;
	
	var content : Int[];  // Array of cards.
	var size : Int;       // Size of the deck (max. number of cards it can contain).
	var nb_in : Int;      // Number of cards currently in the deck.
	var pos : Int;        // Position of the next card to be picked.
	
	
	def init(s : Int, val : Int) : Deck = {
		NB_VALUES = val;
		
		content = new Int[s];
		size = s;
		nb_in = 0;
		pos = 0;
		
		return this;
	}
	
	// Adds a card into the deck unless it is full.
	def add(c : Int) : Int = {
		var r : Int;
		r = 1;
		
		if(nb_in < size && this.is_valid(c)) {
			content[this.mod(pos+nb_in, size)] = c;
			nb_in = nb_in + 1;
			r = 0;
		}
		
		return r;
	}
	
	// Picks a card from the deck and returns it unless it is empty.
	def pick() : Int = {
		var r : Int;
		r = 0 - 1;
		
		if(!(nb_in < 1)) {
			r = content[pos];
			pos = this.mod(pos + 1, size); 
			nb_in = nb_in - 1;
		}
		
		return r;
	}
	
	// Shuffles the deck of cards.
	def shuffle(seed : Int, nb_swaps : Int) : Int = {
		var r : Int;
		var r_t : Int;
		var i : Int;
		var temp : Int;
		
		r = seed;
		r_t = seed;
		
		i = 0;
		while(i < nb_swaps) {
			r = this.mod(5*r/3+4, size);     // Bad pseudo-random numbers generator (but it
			r_t = this.mod(3*r/2+7, size);   // doesn't really matter here for this example).
			temp = content[r];
			content[r] = content[r_t];
			content[r_t] = temp;
			r = r_t;
			i = i+1;
		}
		
		return 0;
	}
	
	// Returns the current number of cards in the deck.
	def getNbCards() : Int = {
		return nb_in;
	}
	
	// Tests whether the deck of cards is empty.
	def is_empty() : Bool = {
		return (nb_in == 0);
	}
	
	// Tests whether the given value is valid for a card.
	def is_valid(c : Int) : Bool = {
		return (!(c < 2) && (c < NB_VALUES+2));
	}
	
	// Modulus.
	def mod(x : Int, m : Int) : Int = {
		var res : Int;
		res = 0;
		
		if(!(m == 0)) {
			res = (x - (x/m)*m);
		}
		
		return res;
	}
	
}


// Class representing a player : a player is simply characterized by his cards.
class Player extends Deck {
	
	def init_p(s : Int, val : Int) : Player = {
		NB_VALUES = val;
		
		content = new Int[s];
		size = s;
		nb_in = 0;
		pos = 0;
		
		return this;
	}
	
	def addAll(d : Deck) : Int = {
		var useless : Int;
		
		while(!(d.is_empty())) {
			useless = this.add(d.pick());
		}
		
		return 0;
	}
	
}


// Main class of the game simulator.
class Game {
	
	var NB_VALUES : Int;
	var NB_COLORS : Int;
	var SEED : Int;
	var NB_SWAPS : Int;
	
	var nb_cards : Int;
	var useless : Int;
	
	def init(v : Int, c : Int, s : Int, swaps : Int) : Game = {
		NB_VALUES = v;
		NB_COLORS = c;
		SEED = s;
		NB_SWAPS = swaps;
		
		nb_cards = NB_VALUES*NB_COLORS;
		
		return this;
	}
	
	def start() : Int = {
		var cards : Deck;
		var p1 : Player;
		var p2 : Player;
		var bataille : Deck;
		
		p1 = new Player().init_p(nb_cards, NB_VALUES);  // Can contain up to all cards.
		p2 = new Player().init_p(nb_cards, NB_VALUES);
		
		cards = this.createDeck();
		useless = cards.shuffle(SEED, NB_SWAPS);
		useless = this.dealCards(p1, p2, cards);
		
		bataille = new Deck().init(nb_cards, NB_VALUES);  // Deck containing all cards that the winner gets (useful in case of draws).
		while(!p1.is_empty() && !p2.is_empty()) {
			useless = this.play(p1, p2, bataille);
		}
		
		return this.printWinner(p1, p2);
	}
	
	def play(p1 : Player, p2 : Player, bataille : Deck) : Int = {
		var card1 : Int;
		var card2 : Int;
		
		card1 = p1.pick();
		card2 = p2.pick();
		
		if(NB_COLORS == 4 && NB_VALUES == 13) {    // Standard deck of cards.
			println("P1:" + this.cardToString(card1) + "  <VS>  P2:" + this.cardToString(card2));
		}
		else {
			println("P1:" + card1 + "  <VS>  P2:" + card2);
		}
		
		if(card1 < card2) {  // Player 2 wins.
			useless = p2.add(card2);
			useless = p2.add(card1);
			useless = p2.addAll(bataille);
			println("  => Player 2 wins the round.     Cards left:  P1:" + p1.getNbCards() + " / P2:" + p2.getNbCards());
		}
		else {
			if(!(card1 == card2)) {  // Player 1 wins.
				useless = p1.add(card1);
				useless = p1.add(card2);
				useless = p1.addAll(bataille);
				println("  => Player 1 wins the round.     Cards left:  P1:" + p1.getNbCards() + " / P2:" + p2.getNbCards());
			}
			else {  // Draw : Bataille !
				useless = bataille.add(card1);
				useless = bataille.add(card2);
				// Each player puts one card upside down on the table :
				if(p1.is_empty()) {
					useless = bataille.add(p2.pick());
					useless = bataille.add(p2.pick());
				}
				else {
					useless = bataille.add(p1.pick());
					if(p2.is_empty()) {
						useless = bataille.add(p1.pick());
					}
					else {
						useless = bataille.add(p2.pick());
					}
				}
				println("  => Draw !                       Cards left:  P1:" + p1.getNbCards() + " / P2:" + p2.getNbCards());
			}
		}
		
		println("");
		
		return 0;
	}
	
	def createDeck() : Deck = {
		var cards : Deck;
		var i : Int;
		var j: Int;
		
		cards = new Deck().init(nb_cards, NB_VALUES);
		
		i = 0;
		while(i < NB_COLORS) {  // Could be done using a mod, but this version allows us to test nested loops.
			j = 0;
			while(j < NB_VALUES) {
				useless = cards.add(j+2);
				j = j+1;
			}
			i = i+1;
		}
		
		return cards;
	}
	
	def dealCards(p1 : Player, p2 : Player, cards : Deck) : Int  = {
		var i : Int;
		
		i = 0;
		while(i < nb_cards/2) {  // Cannot use is_empty() if the number of cards is odd.
			useless = p1.add(cards.pick());
			useless = p2.add(cards.pick());
			i = i+1;
		}
		
		return i;
	}
	
	def printWinner(p1 : Player, p2 : Player) : Int = {
		var winner : Int;
		
		winner = 0;
		if(p2.getNbCards() < p1.getNbCards()) {
				println("And the winner is... PLAYER 1 !");
				winner = 1;
		}
		else {
			if(!(p1.getNbCards() == p2.getNbCards())) {
				println("And the winner is... PLAYER 2 !");
				winner = 2;
			}
			else {
				println("DRAW !");  // Shouldn't happen.
			}
		}
		
		println("");
		
		return winner;
	}
	
	def cardToString(value : Int) : String = {
		var print : String;
		print = "";
		
		if(value == 11) { print = "J"; }
		else if(value == 12) { print = "Q"; }
		else if(value == 13) { print = "K"; }
		else if(value == 14) { print = "A"; }
		else print = ""+value;
		
		return print;
	}
	
}