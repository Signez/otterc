object BruteSudokuSolver {
	def main () : Unit = {
		println(new Demo().run());
	}
}

class BruteSolver {
	var checker: Checker;
	var size:Int;
	
	def init(eltNbRt:Int):BruteSolver = {
		checker = new Checker().init(eltNbRt);
		size = eltNbRt*eltNbRt;
		return this;
	}

	def solve(index:Int, sudoku:Int[]) : Bool= {
		var result:Bool;
		var solution:Int;
		
		result = false;
		solution=1;

		if(checker.check(sudoku)){
			if(index == size*size){
				result = true;
			}else if (!(sudoku[index]==0)){
				result = this.solve(index+1, sudoku);
			}else{
				sudoku[index] = solution;
				while(solution<size+1 && !(this.solve(index+1, sudoku))){
					solution = solution+1;
					sudoku[index] = solution;
				}
				if(solution<size+1){
					result = true;
				}else{
					sudoku[index] = 0;
					result = false;
				}
			}
		}else{
			result = false;
		}
		return result;
	}
}

class Checker {
	var sizeRt:Int;
	var size:Int;
	
	def init(eltNbRt:Int) : Checker = {
		sizeRt = eltNbRt;
		size = sizeRt*sizeRt;
		return this;
	}
	
	def check(sudoku: Int[]):Bool = {
		var result:Bool;
		var i : Int;
		var j : Int;
		
		result = true;
		
		i = 0;
		while(i<sizeRt && result){
			j = 0;
			while(j<sizeRt && result){
				result = result && this.checkLine(i*sizeRt+j, sudoku);
				result = result && this.checkCol(i*sizeRt+j, sudoku);
				result = result && this.checkSquare(i,j, sudoku);
				j=j+1;
			}
			i = i+1;
		}
		return result;
	}
	
	//check if a line is correct.
	def checkLine(line: Int, sudoku:Int[]): Bool = {
		var elts:Int[];
		var i:Int;
		var error:Bool;
		var result:Bool;
		
		error = false;
		result = false;
		if(line<0){
			println("Error: negative index in checkLine");
			error = true;
		}
		if(size-1<line){
			println("Error: Out of bound index in checkLine");
			error = true;
		}
		i = 0;
		elts = new Int[size];
		while(i<size){
			elts[i] = sudoku[line*size+i];
			i=i+1;
		}
		if(!error){
			result = this.isCleanArray(elts);
		}
		return result;
	}
	
	//check if a column is correct.
	def checkCol(col:Int, sudoku:Int[]): Bool = {
		var elts: Int[];
		var i: Int;
		var result:Bool;
		var error:Bool;
		
		error = false;
		result = false;
		if(col<0){
			println("Error: negative index in checkCol");
			error = true;
		}
		if(size-1<col){
			println("Error: Out of bound index in checkCol");
			error = true;
		}
		i=0;
		elts = new Int[size];
		while(i<size){
			elts[i] = sudoku[col+size*i];
			i = i+1;
		}
		if(!error){
			result = this.isCleanArray(elts);
		}
		return result;
	}
	
	//check if a square is correct.
	def checkSquare(lin:Int, col:Int, sudoku:Int[]):Bool = {
		var elts: Int[];
		var i:Int;
		var j:Int;
		var result:Bool;
		var error:Bool;
		
		result = false;
		error = false;
		if(lin<0 || col<0){
			println("Error: negative index in checkCol");
			error = true;
		}
		if(sizeRt<lin || sizeRt<col){
			println("Error: Out of bound index in checkCol");
			error = true;
		}
		
		elts = new Int[size];
		i=0;
		j=0;
		while(i<sizeRt){
			while(j<sizeRt){
				elts[sizeRt*i+j] = sudoku[lin*size*sizeRt+size*i+sizeRt*col+j];
				j = j+1;
			}
			i = i+1;
		}
		if(!error){
			result = this.isCleanArray(elts);
		}
		return result;
	}
	
	
	//returns true if each elt in array is unique except 0;
	def isCleanArray(array:Int[]):Bool = {
		var index: Int;
		var tmpElt: Int;
		var result: Bool;
		
		index = 0;
		result = true;
		while(index<array.length && result){
			tmpElt = array[index];
			index = index+1;
			if(!(tmpElt==0)){
				result = !(this.contains(tmpElt, index, array.length, array));
			}
		}
		return result;
	}
	
	//return true if array contains val between in the interval [from;to[
	def contains(val:Int, from:Int, to:Int, array:Int[]):Bool = {
		var result: Bool;
		var index : Int;
		
		if(from<0){
			from=0;
			println("Warning: Out of bound index corrected");
		}
		if(array.length<to){
			to = array.length;
			println("Warning: Out of bound index corrected");
		}
		
		index = from;
		result = false;
		while(index<to && !result){
			result = array[index] == val;
			index = index+1;
		}
		return result;
	}
}

class Demo{
	def run():String = {
		var sudoku:Int[];
		var solver:BruteSolver;
		var success:Bool;
		
		sudoku = new Int[16];
		solver = new BruteSolver().init(2);
		success = solver.solve(0,sudoku);
		
		println("Example 1:");
		
		sudoku[0] =1;
		sudoku[1] =0;
		sudoku[2] =0;
		sudoku[3] =0;
		sudoku[4] =0;
		sudoku[5] =0;
		sudoku[6] =0;
		sudoku[7] =2;
		sudoku[8] =0;
		sudoku[9] =0;
		sudoku[10] =0;
		sudoku[11] =0;
		sudoku[12] =2;
		sudoku[13] =3;
		sudoku[14] =0;
		sudoku[15] =0;
		
		println("Unsolved sudoku:");
		println(this.printSudoku(sudoku));
		
		if(solver.solve(0,sudoku)){
			println("Solved sudoku:");
			println(this.printSudoku(sudoku));
		}else{
			println("Solver failed. Something went wrong...");
		}
		
		println("Example 2:");
		
		sudoku[0] =0;
		sudoku[1] =1;
		sudoku[2] =0;
		sudoku[3] =0;
		sudoku[4] =0;
		sudoku[5] =0;
		sudoku[6] =2;
		sudoku[7] =3;
		sudoku[8] =0;
		sudoku[9] =0;
		sudoku[10] =3;
		sudoku[11] =0;
		sudoku[12] =1;
		sudoku[13] =0;
		sudoku[14] =0;
		sudoku[15] =0;
		
		println("Unsolvable sudoku:");
		println(this.printSudoku(sudoku));
		
		if(solver.solve(0,sudoku)){
			println("Solved sudoku:");
			println(this.printSudoku(sudoku));
		}else{
			println("Solver failed. The sudoku is unsolvable.");
		}
		
		println("");
		println("Note: This algorithm is showed with only 4*4 sudoku because an usual one would take years to solve this way.");
		
		
		return "";
	}
	
	def printSudoku(sudoku:Int[]):String = {
		var i:Int;
		var j:Int;
		var msg:String;
		var tmpElt:Int;
		
		println("-------------");
		i=0;
		while(i<4){
			msg = "|";
			j=0;
			while(j<4){
				tmpElt = sudoku[4*i+j];
				if(tmpElt == 0){
					msg = msg + "  |";
				}else{
					msg = msg +" "+ tmpElt + "|";
				}
				j = j+1;
			}
			i = i+1;
			println(msg);
			println("-------------");
		}
		return "";
	}
}