object ListHandling {
    def main() : Unit = {
    	// This programs implements a LinkedList and makes some tests with it
    	println(new TestingList().testList());
    }
}

// Class that handles the tests
class TestingList {
	// Method that defines the test
	def testList() : String = {
		var l1 : IntLinkedList;
    	l1 = (new IntLinkedList()).init(2);
    	println("");
    	println(" ------------------ ");
    	println(" Testing some Lists ");
    	println(" ------------------ ");
    	println("");
    	println(" Creating List(2) ");
    	println(l1.toString());
    	println("");
    	println(" Adding 3 and 6 to List ");
    	l1 = l1.add(3);
    	l1 = l1.add(6);
    	println(l1.toString());
    	println("");
    	println(" Getting index 1 ");
    	println(" " + l1.get(1));
    	println("");
    	println(" Removing index 1 ");
    	l1 = l1.remove(1);
    	println(l1.toString());
    	println("");
    	println(" Getting index 1, second time ");
    	println(" " + l1.get(1));
    	println("");
    	println(" Removing unknown index ");
    	l1 = l1.remove(2);
    	println(l1.toString());
    	println("");
    	println(" Removing all indexes ");
    	l1 = l1.remove(0);
    	l1 = l1.remove(0);
    	l1 = l1.remove(0);
    	l1 = l1.remove(0);
    	println(l1.toString());
    	println("");
    	return " Tests finished";
	}
}

// Class that represents a LinkedList
class IntLinkedList {
	var prev : IntLinkedList;
	var next : IntLinkedList;
	var n : Int;
	var index: Int;
	
	// Init the initial parameters of the list (thus, non empty)
    def init(m : Int) : IntLinkedList = {
    	n = m;
    	index = 0;
    	prev = (new NullIntLinkedList());
    	next = (new NullIntLinkedList());
    	return this;
    }
    
    // Set the index of this element
    def setIndex(m: Int) : IntLinkedList = {
    	index = m;
    	return this;
    }
    
    // Set the value of this element
    def setValue(m : Int) : IntLinkedList = {
    	n = m;
    	return this;
    }
    
    // Set the previous element
    def setPrev(prez : IntLinkedList) : IntLinkedList = {
    	prev = prez;
    	return this;
    }
    
    // Set the next element
    def setNext(nexz : IntLinkedList) : IntLinkedList = {
    	next = nexz;
    	return this;
    }
    
    // Add an element to the list
    def add(m : Int) : IntLinkedList = {
    	if (next.isNull()) {
			next = (new IntLinkedList()).init(m).setPrev(this).setIndex(index + 1);
    	} else {
    		next = next.add(m);
    	}
    	return this;
    }
    
    // An IntLinkedList, if not extended, is not empty or null
    def isNull() : Bool = {
    	return false;
    }
    
    // Returns the element of the list at index i
    def get(i : Int) : Int = {
    	var value : Int;
    	value = 0;
		if (index == i) {
    		value = n;
    	} else if (index < i) {
    		value = next.get(i);
    	} else {
    		value = prev.get(i);
    	}	
    	return value;
    }
    
    // Remove the element at index i (thus, updating the indexes that are next)
    def remove(i : Int) : IntLinkedList = {
    	var value : IntLinkedList;
    	value = (new IntLinkedList()).init(0);
    	if (index == i) {
    		prev = prev.setNext(next);
    		next = next.setPrev(prev).moveIndex();
    		value = next;
    	} else if (index < i) {
    		next = next.remove(i);
    		value = this;
    	} else {
    		prev = prev.remove(i);
    		value = this;
    	}
    	return value;
    }
    
    // Update all indexes after this element
    def moveIndex() : IntLinkedList = {
    	index = index - 1;
    	next = next.moveIndex();
    	return this;
    }
    
    // Format for showing a list
    def toStringElem() : String = {
    	var s : String;
    	s = ", " + n + next.toStringElem();
    	return s;
    }
    
    // Initial string for showing a list
    def toString() : String = {
    	return (" List : " + n + next.toStringElem());
    }

}

// This class defines an empty List, thus overriding all inherited method for correct behavior of an empty list.
class NullIntLinkedList extends IntLinkedList{
	def isNull() : Bool = {
    	return true;
    }
    
    def setIndex(m: Int) : IntLinkedList = {
    	return this;
    }
    
    def setValue(m : Int) : IntLinkedList = {
    	return this;
    }
    
    def setPrev(prez : IntLinkedList) : IntLinkedList = {
    	return this;
    }
    
    def setNext(nexz : IntLinkedList) : IntLinkedList = {
    	return this;
    }
    
    def add(m : Int) : IntLinkedList = {
    	return this;
    }
    
    def get(i : Int) : Int = {
    	return 0;
    }
    
    def remove(i : Int) : IntLinkedList = {
    	return this;
    }
    
   	def toStringElem() : String = {
    	return "";
    }
    
    def toString() : String = {
    	return (" Empty List !");
    }
    
    def moveIndex() : IntLinkedList = {
    	return this;
    }
}
